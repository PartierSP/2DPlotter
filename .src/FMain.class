' Gambas class file

Public RTS As Boolean
Public AbsMode As Boolean
Public sOneLine As String

Public Sub SerialPort3D_Read()

  Dim strReceived As String
  Dim strRec As New String[4]
  Dim i As Integer

  'Small pause to allow full line to be buffered
  Sleep 0.01

  Try Read #SerialPort3D, strReceived, Lof(SerialPort3D)
  If Error Then
    strReceived = ""
  Else
    Debug strReceived
    strRec = Split(strReceived, "\n")
     For i = 0 To strRec.Length - 1
       If Left(strRec[i], 2) = "ok" Then
        RTS = True
       Endif
     Next
  Endif

Catch
  Me.Text = Error.Text

End

Public Sub SendSerialData(strMessage As String)

  strMessage &= gb.Lf

  SerialPort3D.Begin()
  Write #SerialPort3D, strMessage
  SerialPort3D.Send()
  RTS = False
  Debug strMessage

Catch
  'FIXME: if stream is closed then stop requesting temperature/location
  Me.Text = Error.Text

End

Public Sub BtPlot_Click()

  Translate(ta_Send.Text)

End

Public Sub Form_Open()

  With SerialPort3D
    .PortName = "/dev/ttyUSB0"
    .Speed = 115200
    .DataBits = SerialPort.Bits8
    .StopBits = SerialPort.Bits1
    .Parity = SerialPort.None
    .FlowControl = SerialPort.Both
    .Open()
  End With

End

Public Sub Form_Close()

  SerialPort3D.Close()

End

Public Sub BtOpen_Click()

  Dialog.Title = ("Select a plot file")
  Dialog.Filter = ["*.hpgl;*.plt", "Plot files"]
  Dialog.FilterIndex = 0
  If Not Dialog.OpenFile() Then 
    ta_Send.Text = Dialog.Path
  Endif

End

Public Sub Translate(sFile As String)
  
  Dim hFile As Stream
  Dim sChar As String
  Dim sStack As String
  Dim LastAbsMode As Boolean

  'Reset Plotter current posistion as X0
  While RTS = False
    Wait 0.01
  Wend
  SendSerialData("G92 X0")

  'Reset Plotter current posistion as Y0
  While RTS = False
    Wait 0.01
  Wend
  SendSerialData("G92 Y0")

  RTS = True
  hFile = Open sFile For Input
  While Not Eof(hFile)
    Line Input #hFile, sOneLine
    While Len(sOneLine) > 0
      sChar = Left(sOneLine, 1)
      If ((sChar <= "Z") And (sChar >= "A")) And Len(sStack) < 2 Then
        sStack &= sChar
        sOneLine = Right(sOneLine, -1)
      Else 
        Select Case sStack
          Case "IN"   'Initalize Ploter
            While RTS = False
              Wait 0.01
            Wend
            SendSerialData("G80") 'Cancel current motion modes
            While RTS = False
              Wait 0.01
            Wend
            SendSerialData("G90") 'Set to absolute measurements
            AbsMode = True
            While RTS = False
              Wait 0.01
            Wend
            SendSerialData("G21") 'Set to metric scaling

          Case "IP"   'Reset Scaling
            'Not Implemented
            
          Case "IW"   'Input Window
            'Not Implemented
            
          Case "PA"   'Plot Absolute
            PAMode(True)

          Case "PD"   'Pen Down
            PenDown(True)

          Case "PE"   'Polyline Encoded
            LastAbsMode = AbsMode
            'Check for a flag char
            If sChar = "<" Then
              'Pen up, move to posistion provided.
              sOneLine = Right(sOneLine, -1)
              sChar = Left(sOneLine, 1)
              PenUp(False)
            Endif
            If sChar = "=" Then
              'Absolute move
              PAMode(False)
              'Decode encoded moves
            Endif
            
            'Check if we need to switch Absolute/Relative mode
            If LastAbsMode <> AbsMode Then
              If LastAbsMode = True Then
                PAMode(False)
              Else 
                PRMode(False)
              Endif
            Endif

          Case "PR"   'Plot Relative
            PRMode(True)

          Case "PU"   'Pen Up
            PenUp(True)

          Case "RO"   'Rotate Coordinate System
            'Not Implemented

          Case "SC"   'Scale
            'Not Implemented
              
          Case "SP"   'Pen Select
            'Perform tool change
            
          Case "VS"   'Velocity Select
            'Not Implemented.
            
          Default 
            sOneLine = Right(sOneLine, -1)
        End Select
        sStack = ""
      Endif
    Wend 
  Wend
  Close #hFile
End

Public Sub getxy() As String
  Dim sChar As String
  Dim sStack As String
  Dim X As Single
  Dim Y As Single
  
  sStack = ""
  sChar = Left(sOneLine, 1)
  If (sChar > "9" Or sChar < "0") And (sChar <> "-") Then
    Return ""
  Endif
  
  While (sChar <= "9" And sChar >= "0") Or sChar = "-"
    sStack &= sChar
    sOneLine = Right(sOneLine, -1)
    sChar = Left(sOneLine, 1)
  Wend
  X = Val(sStack) / 40
  
  If sChar <> "," Then
    'Missing Y value so lets abort
    Return ""
  Endif
  
  sStack = ""
  sOneLine = Right(sOneLine, -1)
  sChar = Left(sOneLine, 1)
  
  While ((sChar <= "9" And sChar >= "0") Or sChar = "-") And Len(sOneLine) > 0
    sStack &= sChar
    sOneLine = Right(sOneLine, -1)
    sChar = Left(sOneLine, 1)
  Wend
  Y = Val(sStack) / 40
  
  Return "X" & Round(X, -2) & " Y" & Round(Y, -2)
End

Public Sub PenUp(CheckForMove As Boolean)

  Dim sChar As String
  Dim sStack As String

  'Z motions must be in Absolute mode
  If AbsMode = False Then
    While RTS = False
      Wait 0.01
    Wend
    SendSerialData("G90")
  Endif

  'Move to rapid plane
  While RTS = False
    Wait 0.01
  Wend
  SendSerialData("G0 Z2")

  'Return to Relative mode if required
  If AbsMode = False Then
    While RTS = False
      Wait 0.01
    Wend
    SendSerialData("G91")
  Endif
  
  If CheckForMove = True Then
    sChar = Left(sOneLine, 1)
    If (sChar <= "9" And sChar >= "0") Or sChar = "-" Then
      'Get and move to PU location
      sStack = getxy()
      If sStack > "" Then
        While RTS = False
          Wait 0.01
        Wend
        SendSerialData("G0 " & sStack)
      Endif
    Endif
  Endif 

End

Public Sub PenDown(CheckForMove As Boolean)

  Dim sChar As String
  Dim sStack As String

  'Z motions must be in Absolute mode
  If AbsMode = False Then
    While RTS = False
      Wait 0.01
    Wend
    SendSerialData("G90")
  Endif

  'Move Pen Down
  While RTS = False
    Wait 0.01
  Wend
  SendSerialData("G0 Z0")

  'Return to Relative mode if required
  If AbsMode = False Then
    While RTS = False
      Wait 0.01
    Wend
    SendSerialData("G91")
  Endif
  
  If CheckForMove = True Then
    sChar = Left(sOneLine, 1)
    If (sChar <= "9" And sChar >= "0") Or sChar = "-" Then
      Repeat 
        If sChar = "," Then
          sOneLine = Right(sOneLine, -1)
        Endif  
        sStack = getxy()
        If sStack > "" Then
          While RTS = False
            Wait 0.01
          Wend
          SendSerialData("G1 " & sStack)
        Endif
        sChar = Left(sOneLine, 1)
      Until sChar <> ","
    Endif
  Endif 

End

Public Sub PAMode(CheckForMove As Boolean)

  Dim sChar As String
  Dim sStack As String

  If AbsMode = False Then
    While RTS = False
      Wait 0.01
    Wend
    SendSerialData("G90") 'Set to absolute measurements
    AbsMode = True
  Endif

  If CheckForMove = True Then
    'Check if a moment is required
    sChar = Left(sOneLine, 1)
    If (sChar <= "9" And sChar >= "0") Or sChar = "-" Then
      Repeat 
        If sChar = "," Then
          sOneLine = Right(sOneLine, -1)
        Endif  
        sStack = getxy()
        If sStack > "" Then
          While RTS = False
            Wait 0.01
          Wend
          SendSerialData("G1 " & sStack)
        Endif
        sChar = Left(sOneLine, 1)
      Until sChar <> ","
    Endif
  Endif 

End

Public Sub PRMode(CheckForMove As Boolean)
  
  Dim sChar As String
  Dim sStack As String

  If AbsMode = True Then
    While RTS = False
      Wait 0.01
    Wend
    SendSerialData("G91") 'Set to relative measurements
    AbsMode = False
  Endif

  If CheckForMove = True Then
    'Check if a movement is required
    sChar = Left(sOneLine, 1)
    If (sChar <= "9" And sChar >= "0") Or sChar = "-" Then
      Repeat 
        If sChar = "," Then
          sOneLine = Right(sOneLine, -1)
        Endif  
        sStack = getxy()
        If sStack > "" Then
          While RTS = False
            Wait 0.01
          Wend
          SendSerialData("G1 " & sStack)
        Endif
        sChar = Left(sOneLine, 1)
      Until sChar <> ","
    Endif
  Endif 

End
